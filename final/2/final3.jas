/ int g(int *h) {
/    h[10] = 5;
/    return (int) &(h[h[10]]);
/ }

g:
    ld [fp+12] -> %r0       / get h's address

    mov #10 -> %r1          / offset by 10 integers (4 bytes each)
    mov #4 -> %r2
    mul %r1, %r2 -> %r1

    add %r0, %r1 -> %r2     / add 10*4 bytes to h's address

    mov #5 -> %r1
    st %r1 -> [r2]          / h[10] = 5
    
    ld [r2] -> %r2          / deference h[10]
    mov #4 -> %r1
    mul %r1, %r2 -> %r3
    add %r0, %r3 -> %r0     / &(h[h[10]])

    ret

main:
    push #44

    mov #1 -> %r0           / store array values
    st %r0 -> [fp-40]
    mov #2 -> %r0
    st %r0 -> [fp-36]
    mov #3 -> %r0
    st %r0 -> [fp-32]
    mov #4 -> %r0
    st %r0 -> [fp-28]
    mov #5 -> %r0
    st %r0 -> [fp-24]
    mov #6 -> %r0
    st %r0 -> [fp-20]
    mov #7 -> %r0
    st %r0 -> [fp-16]
    mov #8 -> %r0
    st %r0 -> [fp-12]
    mov #9 -> %r0
    st %r0 -> [fp-8]
    mov #10 -> %r0
    st %r0 -> [fp-4]
    mov #11 -> %r0
    st %r0 -> [fp]

    mov #-40 -> %r0         / put array on stack
    add %fp, %r0 -> %r0
    st %r0 -> [sp]--

    jsr g
    ret